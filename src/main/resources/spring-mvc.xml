<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context-3.0.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 配置拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 拦截所有pages目录下面的页面 -->
            <mvc:mapping path="/pages/**"/>
            <!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
                LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
            <mvc:exclude-mapping path="/login.html" />
            <mvc:exclude-mapping path="/pages/examples/register.html" />
            <bean class="com.rain.interceptor.LoginIntercepter"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.rain.controller" use-default-filters="false">
        <!-- 只扫描控制器 -->
        <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" /> -->
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController" />
    </context:component-scan>
    <!-- 使用<mvc:annotation-driven/>会自动注册RequestMappingHandlerMapping和   RequestMappingHandlerAdapter两个bean,这是SpringMVC为@Controllers分发请求所必须的，并提供了数据绑定支持、@NumberFormatannotation支持、@DateTimeFormat支持、@valid支持、读写XML的支持(JAXB)和JSON的支持(默认jackson)等功能。-->
    <mvc:annotation-driven />
    <!-- 静态资源处理器 -->
    <!-- web.xml里配置了springMVC的servlet拦截了所有请求，只能处理在后台controller里加了@RequestMapping的请求。静态资源文件*.html
         *.css *.js 等请求被springMVC的servlet拦截后，处理不了，就返回404找不到文件。
         springMVC处理不了静态文件，但是tomcat能处理。下面这个配置就是设置springMVC处理不了的请求，交由web容器默认的servlet来处理
         tomcat默认的servlet是default
     -->
    <mvc:default-servlet-handler />
    <!-- 向容器自动注入配置 -->
    <context:annotation-config/>
    <!-- 将SwaggerConfig配置类注入 -->
    <bean class="com.rain.configer.SwaggerConfiger"/>
    <!-- 配置swagger资源不被拦截   上面配置了静态资源处理器   <mvc:default-servlet-handler /> 这里就不用配置了-->
<!--    <mvc:resources location="classpath:/META-INF/resources/" mapping="swagger-ui.html"/>-->
<!--    <mvc:resources location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"/>-->


    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
            </list>
        </property>
    </bean>
    <!--视图解析器-->
    <!--
    需要配置解析jsp的视图解析器
    jsp解析，默认使用jstl标签解析
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--拼接视图地址的前缀和后缀-->
        <property name="prefix" value="/WEB-INF/page/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
</beans>